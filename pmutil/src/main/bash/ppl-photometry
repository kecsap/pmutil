#!/bin/bash
# Photometry pipeline
# Usage:
# 	ppl-photometry [options]
# Options:
#

usage() {
	echo "Usage: ppl-photometry [OPTIONS]... [BASE_FOLDER]"
	echo "Make photometry on calibrated FITS images."
	echo
	echo "Mandatory arguments to long options are mandatory for short options too."
	echo "  -c,  --color arg        set filter(s), arg is the color code, default color is 'Gi', for available color codes see below"
        echo "  -n,  --name nameCode    set observer code for the AAVSO report"
	echo "  -h,  --help             print this page"
	echo "  -w,  --overwrite        force to overwrite existing results"
	echo
	echo "Available filter color codes are:"
	echo "  Gi | G | gi | g         green channel"
	echo "  Bi | B | bi | b         blue channel"
	echo "  Ri | R | ri | r         red channel"
	echo "  all | ALL | All         all channels, results 3 separate frame"
	echo
}

Color_Off='\033[0m'       # Text Reset
BRed="\e[1;31m"           # Red
BGreen='\033[1;32m'       # Green
Blue='\033[0;34m'         # Blue
BCyan='\e[1;36m'	  # Cyan

print_error() {
	echo -e "${BRed}Error: $1 ${Color_Off}"
}

print_warning() {
	echo -e "${BGreen}Warning: $1 ${Color_Off}"
}

print_info() {
	echo -e "${BCyan}$1 ${Color_Off}"
}

echo
echo -e "${BGreen}ppl-photometry, version 1.1.0${Color_Off}"
echo -e "${Blue}Make photometry on calibrated FITS images.${Color_Off}"
echo

# command line options
COLOR_CHANNEL=("Gi")
NAME_CODE="XXX"
FORCE_OVERWRITE=0
SHOW_HELP=0
BASE_FOLDER=""

# process command line parameters
ARGS_SAVE=$*
while [[ $# -gt 0 ]]; do
	case "$1" in
		-c|--color)
			case "$2" in
				Gi|G|gi|g)
					COLOR_CHANNEL=("Gi")
					;;
				Bi|B|bi|b)
					COLOR_CHANNEL=("Bi")
					;;
				Ri|R|ri|r)
					COLOR_CHANNEL=("Ri")
					;;
				all|ALL|All)
					COLOR_CHANNEL=("Gi" "Bi" "Ri")
					;;
				*)
					print_error "bad color value: $2, using Gi instead."
					COLOR_CHANNEL=("Gi")
					;;
			esac
			shift
			shift
			;;
		-n|--name)
			NAME_CODE=$2
			shift
			shift
			;;
		-w|--overwrite)
			FORCE_OVERWRITE=1
			shift
			;;
		-h|--help)
			SHOW_HELP=1
			shift
			;;
		*)
			#print_error "bad command line option: $1"
			BASE_FOLDER=`echo "$1" | sed 's/\/$//'`
			shift
			;;
	esac
done

if [ $SHOW_HELP -eq 1 ]; then
	usage
	exit 0
fi

if [ ! "$BASE_FOLDER" == "" ] ; then
  if [ ! -d $BASE_FOLDER ] ; then
    print_error "Base folder $BASE_FOLDER not exists or not a directory."
    exit 1
  else
    echo "base folder: $BASE_FOLDER"
  fi
fi

echo "colors: ${COLOR_CHANNEL[*]}"
echo "force: $FORCE_OVERWRITE"

# save command into file
if [ "$BASE_FOLDER" != "" ]; then
	echo "ppl-photometry $ARGS_SAVE" > $BASE_FOLDER/photometry
else
	echo "ppl-photometr $ARGS_SAVE" > ./photometry
fi

######################### discover pipeline elements

# default setup
. "ppl-setup"

if [ ! -d "$PMLIB" ]; then
	mkdir "$PMLIB"
	mv "$HOME/bin/astrometry.cfg" "$PMLIB"
	mv "$HOME/bin/sex.cfg" "$PMLIB"
	mv "$HOME/bin/sex.param" "$PMLIB"
fi

TEMPDIR="temp"


if [ ! "$BASE_FOLDER" == "" ] ; then
  SEQ_FOLDERS=(*$BASE_FOLDER*/$SEQ_FOLDER_NAME*)
else
  SEQ_FOLDERS=($SEG_FOLDER_NAME*)
fi

echo "Sequence folders discovered:" ${SEQ_FOLDERS[@]}

######################### process calibration pipeline

start=`date +%s`

#set -x

# Common arguments (saturation level, image section & trimming, etc.):
AST_CFG="$CONFIG_FOLDER/astrometry.cfg"
SEX_CFG="$CONFIG_FOLDER/sex.cfg"
#SOLVE_ARGS="-O --config $AST_CFG --use-sextractor --sextractor-path sextractor -i ${PHOTDIR}/scamp.cat -n ${PHOTDIR}/scamp.cfg -j ${PHOTDIR}/scamp.ref -r -y -p"
SOLVE_ARGS="-O --config $AST_CFG --use-sextractor --sextractor-path sextractor -r -y -p"

photometry() {
  # $1 - seq folder
  # $2 - phot folder
  # $3 - reference catalog file name
  # $4 - color
#set -x
  # Names of the sequence/combined files:
  local SEQLIST=($1/${SEQ_FILE_PREFIX}*-$4.fits)
    if [ ! -e ${SEQLIST[0]} ]; then
      SEQLIST=($1/Combined-$4.fits)
        if [ ! -e ${SEQLIST[0]} ]; then
          print_warning "No files for photometry in folder $1"
          return 1
        fi
    fi

  for f in ${SEQLIST[*]} ; do

    echo "photometry of $f"

    AST_FILE="$2/`basename -s .fits $f`.ast.fits"
    PMCAT_FILE="$2/`basename $f`.cat"

    print_info "Make astrometry for $f"
    ${AST_BIN_FOLDER}/solve-field $SOLVE_ARGS -D $2 -N $AST_FILE $f

    print_info "Make photometry for $f"
    sextractor $AST_FILE -c $SEX_CFG -CATALOG_NAME $PMCAT_FILE -CATALOG_TYPE ASCII_HEAD

    print_info "Filtering result catalog to ${PMCAT_FILE}.cat"
    pmfilter -c $4 -r $3 -o ${PMCAT_FILE}.cat $PMCAT_FILE

    print_info "Calculate real magnitudes to ${PMCAT_FILE}.pm"
    pmphot -c $4 -o ${PMCAT_FILE}.pm ${PMCAT_FILE}.cat

  done
}

process_photometry() {
  print_info "$3: Make photometry on sequence file(s)."
  echo "folder: $1"

  # Create the photometry dir, if not exists
  if [ ! -e $2 ]; then
   mkdir $2
  fi

  # Photometry reference file:
  local sf=$1
  local basedir=${sf//${SEQ_FOLDER_NAME}*/}
  echo "basedir: $basedir"
  local PMREFS=($basedir/*.cat)
  echo "refcat: ${PMREFS[*]}"
  if [ ${#PMREFS[@]} > 1 ] && [ -e ${PMREFS[0]} ]; then
    local PMREF=${PMREFS[0]}
  else
    print_error "No reference catalog file (.cat) in folder $basedir"
    print_info "Use ppl-refcat command to create reference catalog for the object."
    return 1
  fi

  for color in "${COLOR_CHANNEL[@]}"; do
    photometry $1 $2 $PMREF $color
  done

  # TODO: cleanup - delete light FITS files
}

####################################
# step 1. do photometry for all file
####################################

PMERROR=0
for sf in ${SEQ_FOLDERS[@]} ; do

	pf=${sf//${SEQ_FOLDER_NAME}/${PHOT_FOLDER_NAME}}

	process_photometry $sf $pf "PHOTOMETRY"
	if [ $? == 1 ]; then
		PMERROR=1
		break	
	fi
  
done

########################################
# step 2. create report from all results
########################################

if [ $PMERROR  == 0 ]; then
	if [ ! "$BASE_FOLDER" == "" ] ; then
		PM_FILES=(*$BASE_FOLDER*/$PHOT_FOLDER_NAME/*.pm)
		BASE_FOLDERS=(*$BASE_FOLDER*)
		REPORT_FOLDER=${BASE_FOLDERS[0]}
	else
		PM_FILES=($PHOT_FOLDER_NAME/*.pm)
		REPORT_FOLDER=`pwd`
	fi

	print_info "Create report into $REPORT_FOLDER folder."

	pmresult -o $REPORT_FOLDER -n $NAME_CODE ${PM_FILES[@]}

fi


#set +x

end=`date +%s`

echo
echo -e "${Blue}Photometry is ready."
echo -e "execution time was $((end-start)) seconds.${Color_Off}"

# end.





